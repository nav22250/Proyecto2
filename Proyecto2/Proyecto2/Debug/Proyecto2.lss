
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001159  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00001159  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000e0  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00001268  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026b7  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d6  00000000  00000000  00003a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f5d  00000000  00000000  0000445d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  000053bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d8  00000000  00000000  00005614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009f0  00000000  00000000  000058ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000062dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00001076  00001076  0000114a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000063b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_ADC 000000d0  00000b04  00000b04  00000bd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.readADC 000000b8  00000ca4  00000ca4  00000d78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.CharToInt 00000006  0000105e  0000105e  00001132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.unir    0000002e  00000f10  00000f10  00000fe4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.reescalar 00000066  00000dd6  00000dd6  00000eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.setup   00000032  00000ede  00000ede  00000fb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.cambioADC 000000d0  00000bd4  00000bd4  00000ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.geeprom 0000027e  000000ce  000000ce  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_4 000001dc  0000034c  0000034c  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    000001b2  00000528  00000528  000005fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.valor    00000001  00800100  00800100  00001159  2**0
                  ALLOC
 25 .data.PuertoADC 00000001  00800101  00001084  00001158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss.memoriaeeprom 00000001  00800102  00800102  00001159  2**0
                  ALLOC
 27 .bss.guardar3 00000001  00800103  00800103  00001159  2**0
                  ALLOC
 28 .bss.guardar2 00000001  00800104  00800104  00001159  2**0
                  ALLOC
 29 .bss.guardar1 00000001  00800105  00800105  00001159  2**0
                  ALLOC
 30 .bss.modo     00000001  00800106  00800106  00001159  2**0
                  ALLOC
 31 .text.init_PWM1A 00000154  000006da  000006da  000007ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.init_PWM1B 00000022  00000f3e  00000f3e  00001012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.duty_cycle1A 0000000a  0000103a  0000103a  0000110e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.duty_cycle1B 0000000a  00001044  00001044  00001118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.init_PWM2A 00000124  0000082e  0000082e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.init_PWM2B 00000022  00000f60  00000f60  00001034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.duty_cycle2A 00000006  00001064  00001064  00001138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.duty_cycle2B 00000006  0000106a  0000106a  0000113e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.writeUART_car 0000000e  00000fe8  00000fe8  000010bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.receivedChar 0000000e  00000ff6  00000ff6  000010ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         00000008  0000104e  0000104e  00001122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         000000de  00000952  00000952  00000a26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         0000005e  00000e3c  00000e3c  00000f10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         0000007a  00000d5c  00000d5c  00000e30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000c  0000102e  0000102e  00001102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         00000006  00001070  00001070  00001144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         0000000e  00001004  00001004  000010d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text         0000000e  00001012  00001012  000010e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text         00000022  00000f82  00000f82  00001056  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text         00000044  00000e9a  00000e9a  00000f6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text         0000000e  00001020  00001020  000010f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text         00000008  00001056  00001056  0000112a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text         000000d4  00000a30  00000a30  00000b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__dummy_fini 00000002  0000107e  0000107e  00001152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_funcs_on_exit 00000002  00001080  00001080  00001154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__dummy_simulator_exit 00000002  00001082  00001082  00001156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.exit    00000016  00000fc0  00000fc0  00001094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text._Exit   00000004  0000107a  0000107a  0000114e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.avrlibc 00000012  00000fd6  00000fd6  000010aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.avrlibc 0000001c  00000fa4  00000fa4  00001078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
   8:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
   c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  10:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_4>
  14:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  18:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  1c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  20:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  24:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  28:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  2c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  30:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  34:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  38:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  3c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  40:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  44:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  48:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  4c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  50:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  54:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  58:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  5c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  60:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>
  64:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 01       	movw	r16, r0
  6e:	01 01       	movw	r0, r2
  70:	02 00       	.word	0x0002	; ????
  72:	10 84       	ldd	r1, Z+8	; 0x08
  74:	01 02       	muls	r16, r17
  76:	01 07       	cpc	r16, r17
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 94 02 	call	0x528	; 0x528 <main>
  c6:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

00001076 <__bad_interrupt>:
    1076:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_ADC:

00000b04 <init_ADC>:
 *  Author: Nico
 */ 
#include "ADC.h"

void init_ADC(int referencia,int justificacion,int preescaler){
	ADMUX=0;
 b04:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA=0;
 b08:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	//Definimos la referencia que va a tener el ADC
	if (referencia==0){
 b0c:	00 97       	sbiw	r24, 0x00	; 0
 b0e:	31 f4       	brne	.+12     	; 0xb1c <init_ADC+0x18>
		//Voltaje de referencia interna de 5V.
		ADMUX |= (1<<REFS0);
 b10:	ec e7       	ldi	r30, 0x7C	; 124
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	80 81       	ld	r24, Z
 b16:	80 64       	ori	r24, 0x40	; 64
 b18:	80 83       	st	Z, r24
 b1a:	07 c0       	rjmp	.+14     	; 0xb2a <init_ADC+0x26>
		} else if (referencia==1){
 b1c:	01 97       	sbiw	r24, 0x01	; 1
 b1e:	29 f4       	brne	.+10     	; 0xb2a <init_ADC+0x26>
		//Voltaje de referencia interna de 1.1V.
		ADMUX |= (1<<REFS0)|(1<<REFS1);
 b20:	ec e7       	ldi	r30, 0x7C	; 124
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	80 81       	ld	r24, Z
 b26:	80 6c       	ori	r24, 0xC0	; 192
 b28:	80 83       	st	Z, r24
	}

	//Escogemos la justificaci?n (IZQUIERDA O DERECHA)
	if (justificacion==0){
 b2a:	61 15       	cp	r22, r1
 b2c:	71 05       	cpc	r23, r1
 b2e:	31 f4       	brne	.+12     	; 0xb3c <init_ADC+0x38>
		//Justificaci?n izquierda
		ADMUX |= (1<<ADLAR);
 b30:	ec e7       	ldi	r30, 0x7C	; 124
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	80 62       	ori	r24, 0x20	; 32
 b38:	80 83       	st	Z, r24
 b3a:	08 c0       	rjmp	.+16     	; 0xb4c <init_ADC+0x48>
		} else if (justificacion==1){
 b3c:	61 30       	cpi	r22, 0x01	; 1
 b3e:	71 05       	cpc	r23, r1
 b40:	29 f4       	brne	.+10     	; 0xb4c <init_ADC+0x48>
		//Justificaci?n derecha
		ADMUX &= ~(1<<ADLAR);
 b42:	ec e7       	ldi	r30, 0x7C	; 124
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	80 81       	ld	r24, Z
 b48:	8f 7d       	andi	r24, 0xDF	; 223
 b4a:	80 83       	st	Z, r24
	}

	//Escogemos el preescaler
	if (preescaler==2){
 b4c:	42 30       	cpi	r20, 0x02	; 2
 b4e:	51 05       	cpc	r21, r1
 b50:	31 f4       	brne	.+12     	; 0xb5e <init_ADC+0x5a>
		//Preescaler 2 -> frecuencia del adc = Foscilador/2
		ADCSRA |= (1<<ADPS0);
 b52:	ea e7       	ldi	r30, 0x7A	; 122
 b54:	f0 e0       	ldi	r31, 0x00	; 0
 b56:	80 81       	ld	r24, Z
 b58:	81 60       	ori	r24, 0x01	; 1
 b5a:	80 83       	st	Z, r24
 b5c:	35 c0       	rjmp	.+106    	; 0xbc8 <init_ADC+0xc4>
		} else if (preescaler==4){
 b5e:	44 30       	cpi	r20, 0x04	; 4
 b60:	51 05       	cpc	r21, r1
 b62:	31 f4       	brne	.+12     	; 0xb70 <init_ADC+0x6c>
		//Preescaler 2 -> frecuencia del adc = Foscilador/2
		ADCSRA |=(1<<ADPS1);
 b64:	ea e7       	ldi	r30, 0x7A	; 122
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	80 81       	ld	r24, Z
 b6a:	82 60       	ori	r24, 0x02	; 2
 b6c:	80 83       	st	Z, r24
 b6e:	2c c0       	rjmp	.+88     	; 0xbc8 <init_ADC+0xc4>
		}else if (preescaler==8){
 b70:	48 30       	cpi	r20, 0x08	; 8
 b72:	51 05       	cpc	r21, r1
 b74:	31 f4       	brne	.+12     	; 0xb82 <init_ADC+0x7e>
		//Preescaler 2 -> frecuencia del adc = Foscilador/8
		ADCSRA |=(1<<ADPS1) | (1<<ADPS0);
 b76:	ea e7       	ldi	r30, 0x7A	; 122
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	80 81       	ld	r24, Z
 b7c:	83 60       	ori	r24, 0x03	; 3
 b7e:	80 83       	st	Z, r24
 b80:	23 c0       	rjmp	.+70     	; 0xbc8 <init_ADC+0xc4>
		}else if (preescaler==16){
 b82:	40 31       	cpi	r20, 0x10	; 16
 b84:	51 05       	cpc	r21, r1
 b86:	31 f4       	brne	.+12     	; 0xb94 <init_ADC+0x90>
		//Preescaler 2 -> frecuencia del adc = Foscilador/16
		ADCSRA |= (1<<ADPS2);
 b88:	ea e7       	ldi	r30, 0x7A	; 122
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	80 81       	ld	r24, Z
 b8e:	84 60       	ori	r24, 0x04	; 4
 b90:	80 83       	st	Z, r24
 b92:	1a c0       	rjmp	.+52     	; 0xbc8 <init_ADC+0xc4>
		}else if (preescaler==32){
 b94:	40 32       	cpi	r20, 0x20	; 32
 b96:	51 05       	cpc	r21, r1
 b98:	31 f4       	brne	.+12     	; 0xba6 <init_ADC+0xa2>
		//Preescaler 2 -> frecuencia del adc = Foscilador/32
		ADCSRA |= (1<<ADPS2)|(1<<ADPS0);
 b9a:	ea e7       	ldi	r30, 0x7A	; 122
 b9c:	f0 e0       	ldi	r31, 0x00	; 0
 b9e:	80 81       	ld	r24, Z
 ba0:	85 60       	ori	r24, 0x05	; 5
 ba2:	80 83       	st	Z, r24
 ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <init_ADC+0xc4>
		}else if (preescaler==64){
 ba6:	40 34       	cpi	r20, 0x40	; 64
 ba8:	51 05       	cpc	r21, r1
 baa:	31 f4       	brne	.+12     	; 0xbb8 <init_ADC+0xb4>
		//Preescaler 2 -> frecuencia del adc = Foscilador/64
		ADCSRA |= (1<<ADPS2) | (1<<ADPS1);
 bac:	ea e7       	ldi	r30, 0x7A	; 122
 bae:	f0 e0       	ldi	r31, 0x00	; 0
 bb0:	80 81       	ld	r24, Z
 bb2:	86 60       	ori	r24, 0x06	; 6
 bb4:	80 83       	st	Z, r24
 bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <init_ADC+0xc4>
		} else if (preescaler==128){
 bb8:	40 38       	cpi	r20, 0x80	; 128
 bba:	51 05       	cpc	r21, r1
 bbc:	29 f4       	brne	.+10     	; 0xbc8 <init_ADC+0xc4>
		//Preescaler 2 -> frecuencia del adc = Foscilador/128
		ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 bbe:	ea e7       	ldi	r30, 0x7A	; 122
 bc0:	f0 e0       	ldi	r31, 0x00	; 0
 bc2:	80 81       	ld	r24, Z
 bc4:	87 60       	ori	r24, 0x07	; 7
 bc6:	80 83       	st	Z, r24

	//Habilitando la interrupci?n del ADC
	//ADCSRA |= (1<<ADIE);

	//Enciendo el ADC
	ADCSRA |= (1 << ADEN);
 bc8:	ea e7       	ldi	r30, 0x7A	; 122
 bca:	f0 e0       	ldi	r31, 0x00	; 0
 bcc:	80 81       	ld	r24, Z
 bce:	80 68       	ori	r24, 0x80	; 128
 bd0:	80 83       	st	Z, r24
 bd2:	08 95       	ret

Disassembly of section .text.readADC:

00000ca4 <readADC>:

}

uint8_t readADC(int canal){
 ca4:	9c 01       	movw	r18, r24
	//Borramos el MUX DEL ADC
	ADMUX &= ~(1<<MUX3)& ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
 ca6:	ec e7       	ldi	r30, 0x7C	; 124
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	90 81       	ld	r25, Z
 cac:	90 7f       	andi	r25, 0xF0	; 240
 cae:	90 83       	st	Z, r25

	//Encendemos el puerto deseado
	if (canal==0){
 cb0:	21 15       	cp	r18, r1
 cb2:	31 05       	cpc	r19, r1
 cb4:	21 f4       	brne	.+8      	; 0xcbe <readADC+0x1a>
		//Seleccionar puerto (ADC0 - A0)
		ADMUX &= ~(1<<MUX3)& ~(1<<MUX2) & ~(1<<MUX1) & ~(1<<MUX0);
 cb6:	80 81       	ld	r24, Z
 cb8:	80 7f       	andi	r24, 0xF0	; 240
 cba:	80 83       	st	Z, r24
 cbc:	3e c0       	rjmp	.+124    	; 0xd3a <readADC+0x96>
		}else if (canal==1){
 cbe:	21 30       	cpi	r18, 0x01	; 1
 cc0:	31 05       	cpc	r19, r1
 cc2:	31 f4       	brne	.+12     	; 0xcd0 <readADC+0x2c>
		// Seleccionar puerto (ADC1 - A1)
		ADMUX |= (1<<MUX0);
 cc4:	ec e7       	ldi	r30, 0x7C	; 124
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	80 81       	ld	r24, Z
 cca:	81 60       	ori	r24, 0x01	; 1
 ccc:	80 83       	st	Z, r24
 cce:	35 c0       	rjmp	.+106    	; 0xd3a <readADC+0x96>
		}else if (canal==2){
 cd0:	22 30       	cpi	r18, 0x02	; 2
 cd2:	31 05       	cpc	r19, r1
 cd4:	31 f4       	brne	.+12     	; 0xce2 <readADC+0x3e>
		// Seleccionar puerto (ADC2 - A2)
		ADMUX |= (1<<MUX1);
 cd6:	ec e7       	ldi	r30, 0x7C	; 124
 cd8:	f0 e0       	ldi	r31, 0x00	; 0
 cda:	80 81       	ld	r24, Z
 cdc:	82 60       	ori	r24, 0x02	; 2
 cde:	80 83       	st	Z, r24
 ce0:	2c c0       	rjmp	.+88     	; 0xd3a <readADC+0x96>
		}else if (canal==3){
 ce2:	23 30       	cpi	r18, 0x03	; 3
 ce4:	31 05       	cpc	r19, r1
 ce6:	31 f4       	brne	.+12     	; 0xcf4 <readADC+0x50>
		// Seleccionar puerto (ADC3 - A3)
		ADMUX |= (1<<MUX1)|(1<<MUX0);
 ce8:	ec e7       	ldi	r30, 0x7C	; 124
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	80 81       	ld	r24, Z
 cee:	83 60       	ori	r24, 0x03	; 3
 cf0:	80 83       	st	Z, r24
 cf2:	23 c0       	rjmp	.+70     	; 0xd3a <readADC+0x96>
		}else if (canal==4){
 cf4:	24 30       	cpi	r18, 0x04	; 4
 cf6:	31 05       	cpc	r19, r1
 cf8:	31 f4       	brne	.+12     	; 0xd06 <readADC+0x62>
		//Seleccionar puerto (ADC4 - A4)
		ADMUX |= (1<<MUX2);
 cfa:	ec e7       	ldi	r30, 0x7C	; 124
 cfc:	f0 e0       	ldi	r31, 0x00	; 0
 cfe:	80 81       	ld	r24, Z
 d00:	84 60       	ori	r24, 0x04	; 4
 d02:	80 83       	st	Z, r24
 d04:	1a c0       	rjmp	.+52     	; 0xd3a <readADC+0x96>
		} else if (canal==5){
 d06:	25 30       	cpi	r18, 0x05	; 5
 d08:	31 05       	cpc	r19, r1
 d0a:	31 f4       	brne	.+12     	; 0xd18 <readADC+0x74>
		//Seleccionar puerto (ADC5 - A5)
		ADMUX |= (1<<MUX2)|(1<<MUX0);
 d0c:	ec e7       	ldi	r30, 0x7C	; 124
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	80 81       	ld	r24, Z
 d12:	85 60       	ori	r24, 0x05	; 5
 d14:	80 83       	st	Z, r24
 d16:	11 c0       	rjmp	.+34     	; 0xd3a <readADC+0x96>
		} else if (canal==6){
 d18:	26 30       	cpi	r18, 0x06	; 6
 d1a:	31 05       	cpc	r19, r1
 d1c:	31 f4       	brne	.+12     	; 0xd2a <readADC+0x86>
		//Seleccionar puerto (ADC6 - A6)
		ADMUX |= (1<<MUX2)|(1<<MUX1);
 d1e:	ec e7       	ldi	r30, 0x7C	; 124
 d20:	f0 e0       	ldi	r31, 0x00	; 0
 d22:	80 81       	ld	r24, Z
 d24:	86 60       	ori	r24, 0x06	; 6
 d26:	80 83       	st	Z, r24
 d28:	08 c0       	rjmp	.+16     	; 0xd3a <readADC+0x96>
		} else if (canal==7){
 d2a:	27 30       	cpi	r18, 0x07	; 7
 d2c:	31 05       	cpc	r19, r1
 d2e:	29 f4       	brne	.+10     	; 0xd3a <readADC+0x96>
		//Seleccionar puerto (ADC7 - A7)
		ADMUX |= (1<<MUX2)|(1<<MUX1)|(1<<MUX0);
 d30:	ec e7       	ldi	r30, 0x7C	; 124
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	80 81       	ld	r24, Z
 d36:	87 60       	ori	r24, 0x07	; 7
 d38:	80 83       	st	Z, r24
	}

	//INICIAMOS LECTURA
	ADCSRA |= (1 << ADSC);
 d3a:	ea e7       	ldi	r30, 0x7A	; 122
 d3c:	f0 e0       	ldi	r31, 0x00	; 0
 d3e:	80 81       	ld	r24, Z
 d40:	80 64       	ori	r24, 0x40	; 64
 d42:	80 83       	st	Z, r24

	while (ADCSRA & (1 << ADSC)) {
 d44:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 d48:	86 fd       	sbrc	r24, 6
 d4a:	fc cf       	rjmp	.-8      	; 0xd44 <readADC+0xa0>
		// Esperar
	}
	//uint8_t valor = ADCH;
	ADCSRA |= (1<<ADIF);
 d4c:	ea e7       	ldi	r30, 0x7A	; 122
 d4e:	f0 e0       	ldi	r31, 0x00	; 0
 d50:	80 81       	ld	r24, Z
 d52:	80 61       	ori	r24, 0x10	; 16
 d54:	80 83       	st	Z, r24

	return ADCH;
 d56:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 d5a:	08 95       	ret

Disassembly of section .text.CharToInt:

0000105e <CharToInt>:
uint8_t memoriaeeprom = 0;
volatile uint8_t PuertoADC=3;
volatile uint8_t valor=0;

int CharToInt(char num){
	return num - '0';
    105e:	90 e0       	ldi	r25, 0x00	; 0
}
    1060:	c0 97       	sbiw	r24, 0x30	; 48
    1062:	08 95       	ret

Disassembly of section .text.unir:

00000f10 <unir>:

int unir(int n1, int n2, int n3){
	return n1*100+ n2*10 + n3;
 f10:	e4 e6       	ldi	r30, 0x64	; 100
 f12:	e8 9f       	mul	r30, r24
 f14:	90 01       	movw	r18, r0
 f16:	e9 9f       	mul	r30, r25
 f18:	30 0d       	add	r19, r0
 f1a:	11 24       	eor	r1, r1
 f1c:	cb 01       	movw	r24, r22
 f1e:	88 0f       	add	r24, r24
 f20:	99 1f       	adc	r25, r25
 f22:	66 0f       	add	r22, r22
 f24:	77 1f       	adc	r23, r23
 f26:	66 0f       	add	r22, r22
 f28:	77 1f       	adc	r23, r23
 f2a:	66 0f       	add	r22, r22
 f2c:	77 1f       	adc	r23, r23
 f2e:	68 0f       	add	r22, r24
 f30:	79 1f       	adc	r23, r25
 f32:	c9 01       	movw	r24, r18
 f34:	86 0f       	add	r24, r22
 f36:	97 1f       	adc	r25, r23
}
 f38:	84 0f       	add	r24, r20
 f3a:	95 1f       	adc	r25, r21
 f3c:	08 95       	ret

Disassembly of section .text.reescalar:

00000dd6 <reescalar>:

uint16_t reescalar(uint8_t valor, uint8_t max_origen, uint16_t max_destino) {
 dd6:	cf 92       	push	r12
 dd8:	df 92       	push	r13
 dda:	ef 92       	push	r14
 ddc:	ff 92       	push	r15
 dde:	1f 93       	push	r17
 de0:	cf 93       	push	r28
 de2:	df 93       	push	r29
 de4:	16 2f       	mov	r17, r22
 de6:	ea 01       	movw	r28, r20
	// Escalar el valor al rango 0 - max_destino
	uint16_t valor_reescalado = (float)valor / max_origen * max_destino;
 de8:	68 2f       	mov	r22, r24
 dea:	70 e0       	ldi	r23, 0x00	; 0
 dec:	80 e0       	ldi	r24, 0x00	; 0
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatunsisf>
 df4:	6b 01       	movw	r12, r22
 df6:	7c 01       	movw	r14, r24
 df8:	61 2f       	mov	r22, r17
 dfa:	70 e0       	ldi	r23, 0x00	; 0
 dfc:	80 e0       	ldi	r24, 0x00	; 0
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	0e 94 b0 06 	call	0xd60	; 0xd60 <__floatsisf>
 e04:	9b 01       	movw	r18, r22
 e06:	ac 01       	movw	r20, r24
 e08:	c7 01       	movw	r24, r14
 e0a:	b6 01       	movw	r22, r12
 e0c:	0e 94 27 08 	call	0x104e	; 0x104e <__divsf3>
 e10:	6b 01       	movw	r12, r22
 e12:	7c 01       	movw	r14, r24
 e14:	be 01       	movw	r22, r28
 e16:	80 e0       	ldi	r24, 0x00	; 0
 e18:	90 e0       	ldi	r25, 0x00	; 0
 e1a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__floatunsisf>
 e1e:	a7 01       	movw	r20, r14
 e20:	96 01       	movw	r18, r12
 e22:	0e 94 2b 08 	call	0x1056	; 0x1056 <__mulsf3>
 e26:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fixunssfsi>
	//INICIAR TIMER0 (DUTY CYCLE)
	return valor_reescalado;
}
 e2a:	cb 01       	movw	r24, r22
 e2c:	df 91       	pop	r29
 e2e:	cf 91       	pop	r28
 e30:	1f 91       	pop	r17
 e32:	ff 90       	pop	r15
 e34:	ef 90       	pop	r14
 e36:	df 90       	pop	r13
 e38:	cf 90       	pop	r12
 e3a:	08 95       	ret

Disassembly of section .text.setup:

00000ede <setup>:
void setup() {
	
	DDRC = 0; // Configurar del PC0 al PC7 como entradas
 ede:	17 b8       	out	0x07, r1	; 7

	PORTC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2); // Habilitar resistencias pull-up en PC0 y PC1
 ee0:	88 b1       	in	r24, 0x08	; 8
 ee2:	87 60       	ori	r24, 0x07	; 7
 ee4:	88 b9       	out	0x08, r24	; 8
	
	DDRD |= (1 << DDD2)|(1 << DDD5)|(1 << DDD4); //Habilitar pines del PD2 al PD4 como salidas para LEDS
 ee6:	8a b1       	in	r24, 0x0a	; 10
 ee8:	84 63       	ori	r24, 0x34	; 52
 eea:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD5)|(1 << DDD6); //Habilitar salidas para servos 
 eec:	8a b1       	in	r24, 0x0a	; 10
 eee:	80 66       	ori	r24, 0x60	; 96
 ef0:	8a b9       	out	0x0a, r24	; 10
	DDRB |= (1 << DDB1)|(1 << DDB2)|(1 << DDB3);//Habilitar salidas para los demas servos
 ef2:	84 b1       	in	r24, 0x04	; 4
 ef4:	8e 60       	ori	r24, 0x0E	; 14
 ef6:	84 b9       	out	0x04, r24	; 4

	PCICR |= (1 << PCIE1);
 ef8:	e8 e6       	ldi	r30, 0x68	; 104
 efa:	f0 e0       	ldi	r31, 0x00	; 0
 efc:	80 81       	ld	r24, Z
 efe:	82 60       	ori	r24, 0x02	; 2
 f00:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10);
 f02:	ec e6       	ldi	r30, 0x6C	; 108
 f04:	f0 e0       	ldi	r31, 0x00	; 0
 f06:	80 81       	ld	r24, Z
 f08:	87 60       	ori	r24, 0x07	; 7
 f0a:	80 83       	st	Z, r24
	

	sei(); // Habilitar interrupciones
 f0c:	78 94       	sei
 f0e:	08 95       	ret

Disassembly of section .text.cambioADC:

00000bd4 <cambioADC>:
}

void cambioADC (void){
	if (PuertoADC ==4){
 bd4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 bd8:	84 30       	cpi	r24, 0x04	; 4
 bda:	a9 f4       	brne	.+42     	; 0xc06 <cambioADC+0x32>
		valor= readADC(4);
 bdc:	84 e0       	ldi	r24, 0x04	; 4
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 be4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		uint16_t valor_reescalado = reescalar(valor, 255, 40);
 be8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 bec:	48 e2       	ldi	r20, 0x28	; 40
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	6f ef       	ldi	r22, 0xFF	; 255
 bf2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
		duty_cycle1A(valor_reescalado);
 bf6:	0e 94 1d 08 	call	0x103a	; 0x103a <duty_cycle1A>
		PuertoADC++;
 bfa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 bfe:	8f 5f       	subi	r24, 0xFF	; 255
 c00:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PuertoADC>
 c04:	08 95       	ret
	}else if (PuertoADC ==5){
 c06:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 c0a:	85 30       	cpi	r24, 0x05	; 5
 c0c:	a9 f4       	brne	.+42     	; 0xc38 <cambioADC+0x64>
		valor=readADC(5);
 c0e:	85 e0       	ldi	r24, 0x05	; 5
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 c16:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		uint16_t valor_reescalado = reescalar(valor, 255, 40);
 c1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c1e:	48 e2       	ldi	r20, 0x28	; 40
 c20:	50 e0       	ldi	r21, 0x00	; 0
 c22:	6f ef       	ldi	r22, 0xFF	; 255
 c24:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
		duty_cycle1B(valor_reescalado);
 c28:	0e 94 22 08 	call	0x1044	; 0x1044 <duty_cycle1B>
		PuertoADC++;
 c2c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 c30:	8f 5f       	subi	r24, 0xFF	; 255
 c32:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PuertoADC>
 c36:	08 95       	ret
	}else if (PuertoADC ==6){
 c38:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 c3c:	86 30       	cpi	r24, 0x06	; 6
 c3e:	a9 f4       	brne	.+42     	; 0xc6a <cambioADC+0x96>
		valor=readADC(6);
 c40:	86 e0       	ldi	r24, 0x06	; 6
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 c48:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		uint16_t valor_reescalado = reescalar(valor, 255, 40);
 c4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c50:	48 e2       	ldi	r20, 0x28	; 40
 c52:	50 e0       	ldi	r21, 0x00	; 0
 c54:	6f ef       	ldi	r22, 0xFF	; 255
 c56:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
		duty_cycle2A(valor_reescalado);
 c5a:	0e 94 32 08 	call	0x1064	; 0x1064 <duty_cycle2A>
		PuertoADC++;
 c5e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 c62:	8f 5f       	subi	r24, 0xFF	; 255
 c64:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PuertoADC>
 c68:	08 95       	ret
	}else if (PuertoADC ==7){
 c6a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 c6e:	87 30       	cpi	r24, 0x07	; 7
 c70:	a9 f4       	brne	.+42     	; 0xc9c <cambioADC+0xc8>
		valor=readADC(7);
 c72:	87 e0       	ldi	r24, 0x07	; 7
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 c7a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		uint16_t valor_reescalado = reescalar(valor, 255, 40);
 c7e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c82:	48 e2       	ldi	r20, 0x28	; 40
 c84:	50 e0       	ldi	r21, 0x00	; 0
 c86:	6f ef       	ldi	r22, 0xFF	; 255
 c88:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
		duty_cycle2B(valor_reescalado);
 c8c:	0e 94 35 08 	call	0x106a	; 0x106a <duty_cycle2B>
		PuertoADC++;
 c90:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PuertoADC>
 c94:	8f 5f       	subi	r24, 0xFF	; 255
 c96:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PuertoADC>
 c9a:	08 95       	ret
	}else {
		PuertoADC =4;
 c9c:	84 e0       	ldi	r24, 0x04	; 4
 c9e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PuertoADC>
 ca2:	08 95       	ret

Disassembly of section .text.geeprom:

000000ce <geeprom>:
			break;
		}
	}
}
void geeprom (void){
	if (guardar1 == 1) {
  ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <guardar1>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <geeprom+0xa>
  d6:	4a c0       	rjmp	.+148    	; 0x16c <geeprom+0x9e>
			valor= readADC(3);
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			uint16_t valor_reescalado = reescalar(valor, 255, 40);
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	48 e2       	ldi	r20, 0x28	; 40
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	6f ef       	ldi	r22, 0xFF	; 255
  ee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)0, valor_reescalado);
  f2:	68 2f       	mov	r22, r24
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(4);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	48 e2       	ldi	r20, 0x28	; 40
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	6f ef       	ldi	r22, 0xFF	; 255
 112:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)1, valor_reescalado);
 116:	68 2f       	mov	r22, r24
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(5);
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 130:	48 e2       	ldi	r20, 0x28	; 40
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	6f ef       	ldi	r22, 0xFF	; 255
 136:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)2, valor_reescalado);
 13a:	68 2f       	mov	r22, r24
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(6);
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 154:	48 e2       	ldi	r20, 0x28	; 40
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	6f ef       	ldi	r22, 0xFF	; 255
 15a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)3, valor_reescalado);
 15e:	68 2f       	mov	r22, r24
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			guardar1=0;
 168:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <guardar1>

	}
	
	if (guardar1 == 2) {
 16c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <guardar1>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	09 f0       	breq	.+2      	; 0x176 <geeprom+0xa8>
 174:	4a c0       	rjmp	.+148    	; 0x20a <geeprom+0x13c>

			valor= readADC(3);
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			uint16_t valor_reescalado = reescalar(valor, 255, 40);
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	48 e2       	ldi	r20, 0x28	; 40
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	6f ef       	ldi	r22, 0xFF	; 255
 18c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)5, valor_reescalado);
 190:	68 2f       	mov	r22, r24
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(4);
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 1a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	48 e2       	ldi	r20, 0x28	; 40
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	6f ef       	ldi	r22, 0xFF	; 255
 1b0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)6, valor_reescalado);
 1b4:	68 2f       	mov	r22, r24
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(5);
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	48 e2       	ldi	r20, 0x28	; 40
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	6f ef       	ldi	r22, 0xFF	; 255
 1d4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)7, valor_reescalado);
 1d8:	68 2f       	mov	r22, r24
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(6);
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 1ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f2:	48 e2       	ldi	r20, 0x28	; 40
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	6f ef       	ldi	r22, 0xFF	; 255
 1f8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)8, valor_reescalado);
 1fc:	68 2f       	mov	r22, r24
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			guardar1=0;
 206:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <guardar1>
		
	}
	
	if (guardar1 == 3) {
 20a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <guardar1>
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	09 f0       	breq	.+2      	; 0x214 <geeprom+0x146>
 212:	4a c0       	rjmp	.+148    	; 0x2a8 <geeprom+0x1da>
			valor= readADC(3);
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 21c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			uint16_t valor_reescalado = reescalar(valor, 255, 40);
 220:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 224:	48 e2       	ldi	r20, 0x28	; 40
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	6f ef       	ldi	r22, 0xFF	; 255
 22a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)10, valor_reescalado);
 22e:	68 2f       	mov	r22, r24
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(4);
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	48 e2       	ldi	r20, 0x28	; 40
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	6f ef       	ldi	r22, 0xFF	; 255
 24e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)11, valor_reescalado);
 252:	68 2f       	mov	r22, r24
 254:	8b e0       	ldi	r24, 0x0B	; 11
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(5);
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 264:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 26c:	48 e2       	ldi	r20, 0x28	; 40
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	6f ef       	ldi	r22, 0xFF	; 255
 272:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)12, valor_reescalado);
 276:	68 2f       	mov	r22, r24
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(6);
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 288:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 290:	48 e2       	ldi	r20, 0x28	; 40
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	6f ef       	ldi	r22, 0xFF	; 255
 296:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)13, valor_reescalado);
 29a:	68 2f       	mov	r22, r24
 29c:	8d e0       	ldi	r24, 0x0D	; 13
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			guardar1=0;
 2a4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <guardar1>
		
	}
	
	if (guardar1 == 4) {
 2a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <guardar1>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <geeprom+0x1e4>
 2b0:	4c c0       	rjmp	.+152    	; 0x34a <geeprom+0x27c>
			valor= readADC(3);
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 2ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			uint16_t valor_reescalado = reescalar(valor, 255, 40);
 2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c2:	48 e2       	ldi	r20, 0x28	; 40
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	6f ef       	ldi	r22, 0xFF	; 255
 2c8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)15, valor_reescalado);
 2cc:	68 2f       	mov	r22, r24
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(4);
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 2de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	48 e2       	ldi	r20, 0x28	; 40
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	6f ef       	ldi	r22, 0xFF	; 255
 2ec:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)16, valor_reescalado);
 2f0:	68 2f       	mov	r22, r24
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(5);
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 306:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 30a:	48 e2       	ldi	r20, 0x28	; 40
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	6f ef       	ldi	r22, 0xFF	; 255
 310:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)17, valor_reescalado);
 314:	68 2f       	mov	r22, r24
 316:	81 e1       	ldi	r24, 0x11	; 17
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			valor= readADC(6);
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 52 06 	call	0xca4	; 0xca4 <readADC>
 326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			 valor_reescalado = reescalar(valor, 255, 40);
 32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 32e:	48 e2       	ldi	r20, 0x28	; 40
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	6f ef       	ldi	r22, 0xFF	; 255
 334:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			eeprom_write_byte((uint8_t*)18, valor_reescalado);
 338:	68 2f       	mov	r22, r24
 33a:	82 e1       	ldi	r24, 0x12	; 18
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <eeprom_write_byte>
			guardar1=0;
 342:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <guardar1>
			guardar2=0;
 346:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <guardar2>
 34a:	08 95       	ret

Disassembly of section .text.__vector_4:

0000034c <__vector_4>:
	}else {
		PuertoADC =4;
	}
}

ISR(PCINT1_vect) {
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	static uint8_t prev_state = 1;
	if (!(PINC & (1 << PC0))) { 
 36e:	30 99       	sbic	0x06, 0	; 6
 370:	05 c0       	rjmp	.+10     	; 0x37c <__vector_4+0x30>
		modo++;
 372:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <modo>
 376:	8f 5f       	subi	r24, 0xFF	; 255
 378:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <modo>
	}
	if (!(PINC & (1 << PC1))) {
 37c:	31 99       	sbic	0x06, 1	; 6
 37e:	09 c0       	rjmp	.+18     	; 0x392 <__vector_4+0x46>
		guardar2++;
 380:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <guardar2>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <guardar2>
		guardar1 = guardar2;
 38a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <guardar1>
		geeprom();
 38e:	0e 94 67 00 	call	0xce	; 0xce <__data_load_end>
	}
	if (!(PINC & (1 << PC2))) {
 392:	32 99       	sbic	0x06, 2	; 6
 394:	b8 c0       	rjmp	.+368    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
		guardar3++;
 396:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <guardar3>
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <guardar3>
		switch (guardar3){
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <__vector_4+0x5a>
 3a4:	5d c0       	rjmp	.+186    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 3a6:	28 f4       	brcc	.+10     	; 0x3b2 <__vector_4+0x66>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	51 f0       	breq	.+20     	; 0x3c0 <__vector_4+0x74>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	81 f1       	breq	.+96     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3b0:	aa c0       	rjmp	.+340    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <__vector_4+0x6c>
 3b6:	7c c0       	rjmp	.+248    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 3b8:	85 30       	cpi	r24, 0x05	; 5
 3ba:	09 f4       	brne	.+2      	; 0x3be <__vector_4+0x72>
 3bc:	a1 c0       	rjmp	.+322    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 3be:	a3 c0       	rjmp	.+326    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			case 1:
			memoriaeeprom = eeprom_read_byte((uint8_t*)0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 3ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1A(memoriaeeprom);
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 1d 08 	call	0x103a	; 0x103a <duty_cycle1A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)1);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 3de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1B(memoriaeeprom);
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 22 08 	call	0x1044	; 0x1044 <duty_cycle1B>
			memoriaeeprom = eeprom_read_byte((uint8_t*)2);
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 3f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2A(memoriaeeprom);
 3f6:	0e 94 32 08 	call	0x1064	; 0x1064 <duty_cycle2A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)3);
 3fa:	63 e0       	ldi	r22, 0x03	; 3
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 404:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2B(memoriaeeprom);
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 35 08 	call	0x106a	; 0x106a <duty_cycle2B>
			break;
 40e:	7b c0       	rjmp	.+246    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			
			case 2:
			memoriaeeprom = eeprom_read_byte((uint8_t*)5);
 410:	65 e0       	ldi	r22, 0x05	; 5
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 41a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1A(memoriaeeprom);
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 1d 08 	call	0x103a	; 0x103a <duty_cycle1A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)6);
 424:	66 e0       	ldi	r22, 0x06	; 6
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	80 e8       	ldi	r24, 0x80	; 128
 42a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 42e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1B(memoriaeeprom);
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 22 08 	call	0x1044	; 0x1044 <duty_cycle1B>
			memoriaeeprom = eeprom_read_byte((uint8_t*)7);
 438:	67 e0       	ldi	r22, 0x07	; 7
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 442:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2A(memoriaeeprom);
 446:	0e 94 32 08 	call	0x1064	; 0x1064 <duty_cycle2A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)8);
 44a:	68 e0       	ldi	r22, 0x08	; 8
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	80 e8       	ldi	r24, 0x80	; 128
 450:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 454:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2B(memoriaeeprom);
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 35 08 	call	0x106a	; 0x106a <duty_cycle2B>
			break;
 45e:	53 c0       	rjmp	.+166    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			
			case 3:
			memoriaeeprom = eeprom_read_byte((uint8_t*)10);
 460:	6a e0       	ldi	r22, 0x0A	; 10
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	80 e8       	ldi	r24, 0x80	; 128
 466:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 46a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1A(memoriaeeprom);
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 1d 08 	call	0x103a	; 0x103a <duty_cycle1A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)11);
 474:	6b e0       	ldi	r22, 0x0B	; 11
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 47e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1B(memoriaeeprom);
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 22 08 	call	0x1044	; 0x1044 <duty_cycle1B>
			memoriaeeprom = eeprom_read_byte((uint8_t*)12);
 488:	6c e0       	ldi	r22, 0x0C	; 12
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 e8       	ldi	r24, 0x80	; 128
 48e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 492:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2A(memoriaeeprom);
 496:	0e 94 32 08 	call	0x1064	; 0x1064 <duty_cycle2A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)13);
 49a:	6d e0       	ldi	r22, 0x0D	; 13
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 4a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2B(memoriaeeprom);
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 35 08 	call	0x106a	; 0x106a <duty_cycle2B>
			break;
 4ae:	2b c0       	rjmp	.+86     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			
			case 4:
			memoriaeeprom = eeprom_read_byte((uint8_t*)15);
 4b0:	6f e0       	ldi	r22, 0x0F	; 15
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 4ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1A(memoriaeeprom);
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 1d 08 	call	0x103a	; 0x103a <duty_cycle1A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)16);
 4c4:	60 e1       	ldi	r22, 0x10	; 16
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	80 e8       	ldi	r24, 0x80	; 128
 4ca:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 4ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle1B(memoriaeeprom);
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 22 08 	call	0x1044	; 0x1044 <duty_cycle1B>
			memoriaeeprom = eeprom_read_byte((uint8_t*)17);
 4d8:	61 e1       	ldi	r22, 0x11	; 17
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e8       	ldi	r24, 0x80	; 128
 4de:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 4e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2A(memoriaeeprom);
 4e6:	0e 94 32 08 	call	0x1064	; 0x1064 <duty_cycle2A>
			memoriaeeprom = eeprom_read_byte((uint8_t*)18);
 4ea:	62 e1       	ldi	r22, 0x12	; 18
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <eeprom_read_byte>
 4f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <memoriaeeprom>
			duty_cycle2B(memoriaeeprom);
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 35 08 	call	0x106a	; 0x106a <duty_cycle2B>
			break;
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
			
			case 5:
			guardar2=1;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <guardar2>
			break;
		}
	}
}
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

Disassembly of section .text.main:

00000528 <main>:
	}
}

int main(void)
{
	cli();
 528:	f8 94       	cli
	setup();
 52a:	0e 94 6f 07 	call	0xede	; 0xede <setup>
	CLKPR = CLKPCE;
 52e:	e1 e6       	ldi	r30, 0x61	; 97
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	80 83       	st	Z, r24
	CLKPR = CLKPS0;
 536:	10 82       	st	Z, r1
	
	init_ADC(0,0,128);
 538:	40 e8       	ldi	r20, 0x80	; 128
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 82 05 	call	0xb04	; 0xb04 <init_ADC>
	int top = 155;
	int preescaler=1024;
	init_PWM1A(0,6,preescaler, top);
 548:	2b e9       	ldi	r18, 0x9B	; 155
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e0       	ldi	r20, 0x00	; 0
 54e:	54 e0       	ldi	r21, 0x04	; 4
 550:	66 e0       	ldi	r22, 0x06	; 6
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 6d 03 	call	0x6da	; 0x6da <init_PWM1A>
	init_PWM1B(0);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 9f 07 	call	0xf3e	; 0xf3e <init_PWM1B>
	init_PWM2A(0, 3, preescaler);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	54 e0       	ldi	r21, 0x04	; 4
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 17 04 	call	0x82e	; 0x82e <init_PWM2A>
	init_PWM2B(0);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 b0 07 	call	0xf60	; 0xf60 <init_PWM2B>
	sei();
 57c:	78 94       	sei
	
    while (1) {
	    // Control de modos
			if (modo == 0) {
 57e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <modo>
 582:	81 11       	cpse	r24, r1
 584:	05 c0       	rjmp	.+10     	; 0x590 <main+0x68>
		    PORTD = (1 << DDD2);
 586:	84 e0       	ldi	r24, 0x04	; 4
 588:	8b b9       	out	0x0b, r24	; 11
			cambioADC();
 58a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <cambioADC>
 58e:	f7 cf       	rjmp	.-18     	; 0x57e <main+0x56>
		    } else if (modo == 1) {
 590:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <modo>
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	29 f4       	brne	.+10     	; 0x5a2 <main+0x7a>
		    PORTD = (1 << DDD5);
 598:	80 e2       	ldi	r24, 0x20	; 32
 59a:	8b b9       	out	0x0b, r24	; 11
			guardar3=0;
 59c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <guardar3>
 5a0:	ee cf       	rjmp	.-36     	; 0x57e <main+0x56>
			
		    } else if (modo == 2) {
 5a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <modo>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	09 f0       	breq	.+2      	; 0x5ac <main+0x84>
 5aa:	8f c0       	rjmp	.+286    	; 0x6ca <main+0x1a2>
			int n1;
			int n2;
			int n3;
			uint16_t valor_reescalado;
			int num;
		    PORTD = (1 << DDD4);
 5ac:	80 e1       	ldi	r24, 0x10	; 16
 5ae:	8b b9       	out	0x0b, r24	; 11
			
			writeUART_car('1');
 5b0:	81 e3       	ldi	r24, 0x31	; 49
 5b2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <writeUART_car>
			recibido1=receivedChar();
 5b6:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 5ba:	c8 2f       	mov	r28, r24
			recibido2=receivedChar();
 5bc:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 5c0:	18 2f       	mov	r17, r24
			recibido3=receivedChar();
 5c2:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 5c6:	f8 2e       	mov	r15, r24
			
			n1=CharToInt(recibido1);
 5c8:	8c 2f       	mov	r24, r28
 5ca:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 5ce:	ec 01       	movw	r28, r24
			n2=CharToInt(recibido2);
 5d0:	81 2f       	mov	r24, r17
 5d2:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 5d6:	8c 01       	movw	r16, r24
			n3=CharToInt(recibido3);
 5d8:	8f 2d       	mov	r24, r15
 5da:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
			
			num= unir(n1,n2,n3);
 5de:	ac 01       	movw	r20, r24
 5e0:	b8 01       	movw	r22, r16
 5e2:	ce 01       	movw	r24, r28
 5e4:	0e 94 88 07 	call	0xf10	; 0xf10 <unir>
			valor_reescalado = reescalar(num, 255, 40);
 5e8:	48 e2       	ldi	r20, 0x28	; 40
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	6f ef       	ldi	r22, 0xFF	; 255
 5ee:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			duty_cycle1A(valor_reescalado);
 5f2:	0e 94 1d 08 	call	0x103a	; 0x103a <duty_cycle1A>
			
			writeUART_car('2');
 5f6:	82 e3       	ldi	r24, 0x32	; 50
 5f8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <writeUART_car>
			recibido1=receivedChar();
 5fc:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 600:	c8 2f       	mov	r28, r24
			recibido2=receivedChar();
 602:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 606:	18 2f       	mov	r17, r24
			recibido3=receivedChar();
 608:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 60c:	f8 2e       	mov	r15, r24
			
			n1=CharToInt(recibido1);
 60e:	8c 2f       	mov	r24, r28
 610:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 614:	ec 01       	movw	r28, r24
			n2=CharToInt(recibido2);
 616:	81 2f       	mov	r24, r17
 618:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 61c:	8c 01       	movw	r16, r24
			n3=CharToInt(recibido3);
 61e:	8f 2d       	mov	r24, r15
 620:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
			
			num= unir(n1,n2,n3);
 624:	ac 01       	movw	r20, r24
 626:	b8 01       	movw	r22, r16
 628:	ce 01       	movw	r24, r28
 62a:	0e 94 88 07 	call	0xf10	; 0xf10 <unir>
			valor_reescalado = reescalar(num, 255, 40);
 62e:	48 e2       	ldi	r20, 0x28	; 40
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	6f ef       	ldi	r22, 0xFF	; 255
 634:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			duty_cycle1B(valor_reescalado);
 638:	0e 94 22 08 	call	0x1044	; 0x1044 <duty_cycle1B>
			
			writeUART_car('3');
 63c:	83 e3       	ldi	r24, 0x33	; 51
 63e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <writeUART_car>
			recibido1=receivedChar();
 642:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 646:	c8 2f       	mov	r28, r24
			recibido2=receivedChar();
 648:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 64c:	18 2f       	mov	r17, r24
			recibido3=receivedChar();
 64e:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 652:	f8 2e       	mov	r15, r24
			
			n1=CharToInt(recibido1);
 654:	8c 2f       	mov	r24, r28
 656:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 65a:	ec 01       	movw	r28, r24
			n2=CharToInt(recibido2);
 65c:	81 2f       	mov	r24, r17
 65e:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 662:	8c 01       	movw	r16, r24
			n3=CharToInt(recibido3);
 664:	8f 2d       	mov	r24, r15
 666:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
			
			num= unir(n1,n2,n3);
 66a:	ac 01       	movw	r20, r24
 66c:	b8 01       	movw	r22, r16
 66e:	ce 01       	movw	r24, r28
 670:	0e 94 88 07 	call	0xf10	; 0xf10 <unir>
			 valor_reescalado = reescalar(num, 255, 40);
 674:	48 e2       	ldi	r20, 0x28	; 40
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	6f ef       	ldi	r22, 0xFF	; 255
 67a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			duty_cycle2A(valor_reescalado);
 67e:	0e 94 32 08 	call	0x1064	; 0x1064 <duty_cycle2A>
			
			writeUART_car('4');
 682:	84 e3       	ldi	r24, 0x34	; 52
 684:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <writeUART_car>
			recibido1=receivedChar();
 688:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 68c:	c8 2f       	mov	r28, r24
			recibido2=receivedChar();
 68e:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 692:	18 2f       	mov	r17, r24
			recibido3=receivedChar();
 694:	0e 94 fb 07 	call	0xff6	; 0xff6 <receivedChar>
 698:	f8 2e       	mov	r15, r24
			
			n1=CharToInt(recibido1);
 69a:	8c 2f       	mov	r24, r28
 69c:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 6a0:	ec 01       	movw	r28, r24
			n2=CharToInt(recibido2);
 6a2:	81 2f       	mov	r24, r17
 6a4:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
 6a8:	8c 01       	movw	r16, r24
			n3=CharToInt(recibido3);
 6aa:	8f 2d       	mov	r24, r15
 6ac:	0e 94 2f 08 	call	0x105e	; 0x105e <CharToInt>
			
			num= unir(n1,n2,n3);
 6b0:	ac 01       	movw	r20, r24
 6b2:	b8 01       	movw	r22, r16
 6b4:	ce 01       	movw	r24, r28
 6b6:	0e 94 88 07 	call	0xf10	; 0xf10 <unir>
			 valor_reescalado = reescalar(num, 255, 40);
 6ba:	48 e2       	ldi	r20, 0x28	; 40
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	6f ef       	ldi	r22, 0xFF	; 255
 6c0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <reescalar>
			duty_cycle2B(valor_reescalado);
 6c4:	0e 94 35 08 	call	0x106a	; 0x106a <duty_cycle2B>
 6c8:	5a cf       	rjmp	.-332    	; 0x57e <main+0x56>
	    } else if (modo >= 3) {
 6ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <modo>
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	08 f4       	brcc	.+2      	; 0x6d4 <main+0x1ac>
 6d2:	55 cf       	rjmp	.-342    	; 0x57e <main+0x56>
			modo=0;
 6d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <modo>
 6d8:	52 cf       	rjmp	.-348    	; 0x57e <main+0x56>

Disassembly of section .text.init_PWM1A:

000006da <init_PWM1A>:
 * Created: 4/29/2024 5:18:58 PM
 *  Author: Nico
 */ 
#include "PWM1A.h"

void init_PWM1A(int orientacion,int modo, int preescaler,uint16_t frecuency ){
 6da:	f9 01       	movw	r30, r18
	//Definimos el puerto de salida
	DDRB |= (1<<PINB1);
 6dc:	34 b1       	in	r19, 0x04	; 4
 6de:	32 60       	ori	r19, 0x02	; 2
 6e0:	34 b9       	out	0x04, r19	; 4
	TCCR1A=0;
 6e2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0;
 6e6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//Definimos la orientaci n
	if (orientacion==0){
 6ea:	89 2b       	or	r24, r25
 6ec:	31 f4       	brne	.+12     	; 0x6fa <init_PWM1A+0x20>
		//No invertido
		TCCR1A |= (1<<COM1A1);
 6ee:	a0 e8       	ldi	r26, 0x80	; 128
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	8c 91       	ld	r24, X
 6f4:	80 68       	ori	r24, 0x80	; 128
 6f6:	8c 93       	st	X, r24
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <init_PWM1A+0x2a>
		}else{
		//invertido
		TCCR1A |= (1<<COM1A1) | (1<<COM1A0);
 6fa:	a0 e8       	ldi	r26, 0x80	; 128
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	8c 91       	ld	r24, X
 700:	80 6c       	ori	r24, 0xC0	; 192
 702:	8c 93       	st	X, r24
	}
	
	//Definimos modo de operaci n FAST O PhaseCorrect
	if (modo==0){
 704:	61 15       	cp	r22, r1
 706:	71 05       	cpc	r23, r1
 708:	59 f4       	brne	.+22     	; 0x720 <init_PWM1A+0x46>
		//FAST con 8 bits
		TCCR1A |= (1<<WGM10);
 70a:	a0 e8       	ldi	r26, 0x80	; 128
 70c:	b0 e0       	ldi	r27, 0x00	; 0
 70e:	8c 91       	ld	r24, X
 710:	81 60       	ori	r24, 0x01	; 1
 712:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
 714:	a1 e8       	ldi	r26, 0x81	; 129
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	8c 91       	ld	r24, X
 71a:	88 60       	ori	r24, 0x08	; 8
 71c:	8c 93       	st	X, r24
 71e:	52 c0       	rjmp	.+164    	; 0x7c4 <init_PWM1A+0xea>
		}else if(modo==1){
 720:	61 30       	cpi	r22, 0x01	; 1
 722:	71 05       	cpc	r23, r1
 724:	59 f4       	brne	.+22     	; 0x73c <init_PWM1A+0x62>
		//Fast con 9 bits
		TCCR1A |= (1<<WGM11);
 726:	a0 e8       	ldi	r26, 0x80	; 128
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	8c 91       	ld	r24, X
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
 730:	a1 e8       	ldi	r26, 0x81	; 129
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	8c 91       	ld	r24, X
 736:	88 60       	ori	r24, 0x08	; 8
 738:	8c 93       	st	X, r24
 73a:	44 c0       	rjmp	.+136    	; 0x7c4 <init_PWM1A+0xea>
		}else if(modo==2){
 73c:	62 30       	cpi	r22, 0x02	; 2
 73e:	71 05       	cpc	r23, r1
 740:	59 f4       	brne	.+22     	; 0x758 <init_PWM1A+0x7e>
		//FAST con 10 bits
		TCCR1A |= (1<<WGM11)|(1<<WGM10);
 742:	a0 e8       	ldi	r26, 0x80	; 128
 744:	b0 e0       	ldi	r27, 0x00	; 0
 746:	8c 91       	ld	r24, X
 748:	83 60       	ori	r24, 0x03	; 3
 74a:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12);
 74c:	a1 e8       	ldi	r26, 0x81	; 129
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	8c 91       	ld	r24, X
 752:	88 60       	ori	r24, 0x08	; 8
 754:	8c 93       	st	X, r24
 756:	36 c0       	rjmp	.+108    	; 0x7c4 <init_PWM1A+0xea>
		}else if(modo==3){
 758:	63 30       	cpi	r22, 0x03	; 3
 75a:	71 05       	cpc	r23, r1
 75c:	31 f4       	brne	.+12     	; 0x76a <init_PWM1A+0x90>
		//PhaseCorrect con 8 bits
		TCCR1A |= (1<<WGM10);
 75e:	a0 e8       	ldi	r26, 0x80	; 128
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	8c 91       	ld	r24, X
 764:	81 60       	ori	r24, 0x01	; 1
 766:	8c 93       	st	X, r24
 768:	2d c0       	rjmp	.+90     	; 0x7c4 <init_PWM1A+0xea>
		}else if(modo==4){
 76a:	64 30       	cpi	r22, 0x04	; 4
 76c:	71 05       	cpc	r23, r1
 76e:	31 f4       	brne	.+12     	; 0x77c <init_PWM1A+0xa2>
		//PhaseCorrect con 9 bits
		TCCR1A |= (1<<WGM11);
 770:	a0 e8       	ldi	r26, 0x80	; 128
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	8c 91       	ld	r24, X
 776:	82 60       	ori	r24, 0x02	; 2
 778:	8c 93       	st	X, r24
 77a:	24 c0       	rjmp	.+72     	; 0x7c4 <init_PWM1A+0xea>
		}else if(modo==5){
 77c:	65 30       	cpi	r22, 0x05	; 5
 77e:	71 05       	cpc	r23, r1
 780:	31 f4       	brne	.+12     	; 0x78e <init_PWM1A+0xb4>
		//PhaseCorrect con 10 bits
		TCCR1A |= (1<<WGM11)|(1<<WGM10);
 782:	a0 e8       	ldi	r26, 0x80	; 128
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	8c 91       	ld	r24, X
 788:	83 60       	ori	r24, 0x03	; 3
 78a:	8c 93       	st	X, r24
 78c:	1b c0       	rjmp	.+54     	; 0x7c4 <init_PWM1A+0xea>
		}else if (modo==6){
 78e:	66 30       	cpi	r22, 0x06	; 6
 790:	71 05       	cpc	r23, r1
 792:	59 f4       	brne	.+22     	; 0x7aa <init_PWM1A+0xd0>
		//FAST con ICR1 TOP
		TCCR1A |= (1<<WGM11);
 794:	a0 e8       	ldi	r26, 0x80	; 128
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	8c 91       	ld	r24, X
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12)|(1<<WGM13);
 79e:	a1 e8       	ldi	r26, 0x81	; 129
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	8c 91       	ld	r24, X
 7a4:	88 61       	ori	r24, 0x18	; 24
 7a6:	8c 93       	st	X, r24
 7a8:	0d c0       	rjmp	.+26     	; 0x7c4 <init_PWM1A+0xea>
		}else if (modo==7){
 7aa:	67 30       	cpi	r22, 0x07	; 7
 7ac:	71 05       	cpc	r23, r1
 7ae:	51 f4       	brne	.+20     	; 0x7c4 <init_PWM1A+0xea>
		//PhaseCorrect con ICR1 TOP
		TCCR1A |= (1<<WGM11);
 7b0:	a0 e8       	ldi	r26, 0x80	; 128
 7b2:	b0 e0       	ldi	r27, 0x00	; 0
 7b4:	8c 91       	ld	r24, X
 7b6:	82 60       	ori	r24, 0x02	; 2
 7b8:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM13);
 7ba:	a1 e8       	ldi	r26, 0x81	; 129
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	8c 91       	ld	r24, X
 7c0:	80 61       	ori	r24, 0x10	; 16
 7c2:	8c 93       	st	X, r24
	}
	
	//Definimos el preescaler
	switch(preescaler){
 7c4:	40 34       	cpi	r20, 0x40	; 64
 7c6:	51 05       	cpc	r21, r1
 7c8:	e1 f0       	breq	.+56     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ca:	3c f4       	brge	.+14     	; 0x7da <init_PWM1A+0x100>
 7cc:	41 15       	cp	r20, r1
 7ce:	51 05       	cpc	r21, r1
 7d0:	61 f0       	breq	.+24     	; 0x7ea <init_PWM1A+0x110>
 7d2:	48 30       	cpi	r20, 0x08	; 8
 7d4:	51 05       	cpc	r21, r1
 7d6:	79 f0       	breq	.+30     	; 0x7f6 <init_PWM1A+0x11c>
 7d8:	25 c0       	rjmp	.+74     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7da:	41 15       	cp	r20, r1
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	58 07       	cpc	r21, r24
 7e0:	b1 f0       	breq	.+44     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e2:	41 15       	cp	r20, r1
 7e4:	54 40       	sbci	r21, 0x04	; 4
 7e6:	c9 f0       	breq	.+50     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7e8:	1d c0       	rjmp	.+58     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		case 0:
		TCCR1B |= (1<<CS10);
 7ea:	a1 e8       	ldi	r26, 0x81	; 129
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	8c 91       	ld	r24, X
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	8c 93       	st	X, r24
		break;
 7f4:	17 c0       	rjmp	.+46     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		case 8:
		TCCR1B |= (1<<CS11);
 7f6:	a1 e8       	ldi	r26, 0x81	; 129
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	8c 91       	ld	r24, X
 7fc:	82 60       	ori	r24, 0x02	; 2
 7fe:	8c 93       	st	X, r24
		break;
 800:	11 c0       	rjmp	.+34     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		case 64:
		TCCR1B |= (1<<CS11)|(1<<CS10);
 802:	a1 e8       	ldi	r26, 0x81	; 129
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	8c 91       	ld	r24, X
 808:	83 60       	ori	r24, 0x03	; 3
 80a:	8c 93       	st	X, r24
		break;
 80c:	0b c0       	rjmp	.+22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		case 256:
		TCCR1B |= (1<<CS12);
 80e:	a1 e8       	ldi	r26, 0x81	; 129
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	8c 91       	ld	r24, X
 814:	84 60       	ori	r24, 0x04	; 4
 816:	8c 93       	st	X, r24
		break;
 818:	05 c0       	rjmp	.+10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		case 1024:
		TCCR1B |= (1<<CS12)|(1<<CS10);
 81a:	a1 e8       	ldi	r26, 0x81	; 129
 81c:	b0 e0       	ldi	r27, 0x00	; 0
 81e:	8c 91       	ld	r24, X
 820:	85 60       	ori	r24, 0x05	; 5
 822:	8c 93       	st	X, r24
		break;
	}
	//Definimos la frecuencia (unicamente funciona en modo donde el top es ICR1)
	//Fpwm=(fosc)/(preescaler*(1+TOP)
	ICR1 = frecuency;
 824:	f0 93 87 00 	sts	0x0087, r31	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 828:	e0 93 86 00 	sts	0x0086, r30	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 82c:	08 95       	ret

Disassembly of section .text.init_PWM1B:

00000f3e <init_PWM1B>:
}

void init_PWM1B(int orientacion){
	//Definimos el puerto de salida
	DDRB |= (1<<PINB2);
 f3e:	24 b1       	in	r18, 0x04	; 4
 f40:	24 60       	ori	r18, 0x04	; 4
 f42:	24 b9       	out	0x04, r18	; 4
	
	//Definimos la orientaci n
	if (orientacion==0){
 f44:	89 2b       	or	r24, r25
 f46:	31 f4       	brne	.+12     	; 0xf54 <init_PWM1B+0x16>
		//No invertido
		TCCR1A |= (1<<COM1B1);
 f48:	e0 e8       	ldi	r30, 0x80	; 128
 f4a:	f0 e0       	ldi	r31, 0x00	; 0
 f4c:	80 81       	ld	r24, Z
 f4e:	80 62       	ori	r24, 0x20	; 32
 f50:	80 83       	st	Z, r24
 f52:	08 95       	ret
		}else{
		//invertido
		TCCR1A |= (1<<COM1B1) | (1<<COM1B0);
 f54:	e0 e8       	ldi	r30, 0x80	; 128
 f56:	f0 e0       	ldi	r31, 0x00	; 0
 f58:	80 81       	ld	r24, Z
 f5a:	80 63       	ori	r24, 0x30	; 48
 f5c:	80 83       	st	Z, r24
 f5e:	08 95       	ret

Disassembly of section .text.duty_cycle1A:

0000103a <duty_cycle1A>:
	}
}

void duty_cycle1A(uint16_t duty){
	OCR1A = duty;
    103a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    103e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1042:	08 95       	ret

Disassembly of section .text.duty_cycle1B:

00001044 <duty_cycle1B>:
}

void duty_cycle1B(uint16_t duty){
	OCR1B = duty;
    1044:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1048:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    104c:	08 95       	ret

Disassembly of section .text.init_PWM2A:

0000082e <init_PWM2A>:
 */ 
#include "PWM2A.h"

void init_PWM2A(int orientacion,int modo, int preescaler){
	//Definimos el puerto de salida
	DDRB |= (1<<PINB3);
 82e:	24 b1       	in	r18, 0x04	; 4
 830:	28 60       	ori	r18, 0x08	; 8
 832:	24 b9       	out	0x04, r18	; 4
	TCCR2A=0;
 834:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B=0;
 838:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//Definimos la orientaci n
	if (orientacion==0){
 83c:	89 2b       	or	r24, r25
 83e:	31 f4       	brne	.+12     	; 0x84c <init_PWM2A+0x1e>
		//No invertido
		TCCR2A |= (1<<COM2A1);
 840:	e0 eb       	ldi	r30, 0xB0	; 176
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	80 68       	ori	r24, 0x80	; 128
 848:	80 83       	st	Z, r24
 84a:	05 c0       	rjmp	.+10     	; 0x856 <init_PWM2A+0x28>
		}else{
		//invertido
		TCCR2A |= (1<<COM2A1) | (1<<COM2A0);
 84c:	e0 eb       	ldi	r30, 0xB0	; 176
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	80 6c       	ori	r24, 0xC0	; 192
 854:	80 83       	st	Z, r24
	}
	
	//Definimos modo de operaci n FAST O PhaseCorrect
	if(modo==1){
 856:	61 30       	cpi	r22, 0x01	; 1
 858:	71 05       	cpc	r23, r1
 85a:	31 f4       	brne	.+12     	; 0x868 <init_PWM2A+0x3a>
		//Fast con 9 bits
		TCCR2A |= (1<<WGM20);
 85c:	e0 eb       	ldi	r30, 0xB0	; 176
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 81       	ld	r24, Z
 862:	81 60       	ori	r24, 0x01	; 1
 864:	80 83       	st	Z, r24
 866:	44 c0       	rjmp	.+136    	; 0x8f0 <init_PWM2A+0xc2>
		}else if(modo==2){
 868:	62 30       	cpi	r22, 0x02	; 2
 86a:	71 05       	cpc	r23, r1
 86c:	31 f4       	brne	.+12     	; 0x87a <init_PWM2A+0x4c>
		//FAST con 10 bits
		TCCR2A |= (1<<WGM21);
 86e:	e0 eb       	ldi	r30, 0xB0	; 176
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	82 60       	ori	r24, 0x02	; 2
 876:	80 83       	st	Z, r24
 878:	3b c0       	rjmp	.+118    	; 0x8f0 <init_PWM2A+0xc2>
		}else if(modo==3){
 87a:	63 30       	cpi	r22, 0x03	; 3
 87c:	71 05       	cpc	r23, r1
 87e:	31 f4       	brne	.+12     	; 0x88c <init_PWM2A+0x5e>
		//PhaseCorrect con 8 bits
		TCCR2A |= (1<<WGM21) | (1<<WGM20);
 880:	e0 eb       	ldi	r30, 0xB0	; 176
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	83 60       	ori	r24, 0x03	; 3
 888:	80 83       	st	Z, r24
 88a:	32 c0       	rjmp	.+100    	; 0x8f0 <init_PWM2A+0xc2>
		}else if(modo==4){
 88c:	64 30       	cpi	r22, 0x04	; 4
 88e:	71 05       	cpc	r23, r1
 890:	31 f4       	brne	.+12     	; 0x89e <init_PWM2A+0x70>
		//PhaseCorrect con 9 bits
		TCCR2B |= (1<<WGM22);
 892:	e1 eb       	ldi	r30, 0xB1	; 177
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	88 60       	ori	r24, 0x08	; 8
 89a:	80 83       	st	Z, r24
 89c:	29 c0       	rjmp	.+82     	; 0x8f0 <init_PWM2A+0xc2>
		}else if(modo==5){
 89e:	65 30       	cpi	r22, 0x05	; 5
 8a0:	71 05       	cpc	r23, r1
 8a2:	59 f4       	brne	.+22     	; 0x8ba <init_PWM2A+0x8c>
		//PhaseCorrect con 10 bits
		TCCR2A |= (1<<WGM20);
 8a4:	e0 eb       	ldi	r30, 0xB0	; 176
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	80 81       	ld	r24, Z
 8aa:	81 60       	ori	r24, 0x01	; 1
 8ac:	80 83       	st	Z, r24
		TCCR2B |= (1<<WGM22);
 8ae:	e1 eb       	ldi	r30, 0xB1	; 177
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	88 60       	ori	r24, 0x08	; 8
 8b6:	80 83       	st	Z, r24
 8b8:	1b c0       	rjmp	.+54     	; 0x8f0 <init_PWM2A+0xc2>
		}else if (modo==6){
 8ba:	66 30       	cpi	r22, 0x06	; 6
 8bc:	71 05       	cpc	r23, r1
 8be:	59 f4       	brne	.+22     	; 0x8d6 <init_PWM2A+0xa8>
		//FAST con ICR1 TOP
		TCCR2A |= (1<<WGM21);
 8c0:	e0 eb       	ldi	r30, 0xB0	; 176
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	82 60       	ori	r24, 0x02	; 2
 8c8:	80 83       	st	Z, r24
		TCCR2B |= (1<<WGM22);
 8ca:	e1 eb       	ldi	r30, 0xB1	; 177
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 8d0:	88 60       	ori	r24, 0x08	; 8
 8d2:	80 83       	st	Z, r24
 8d4:	0d c0       	rjmp	.+26     	; 0x8f0 <init_PWM2A+0xc2>
		}else if (modo==7){
 8d6:	67 30       	cpi	r22, 0x07	; 7
 8d8:	71 05       	cpc	r23, r1
 8da:	51 f4       	brne	.+20     	; 0x8f0 <init_PWM2A+0xc2>
		//PhaseCorrect con ICR1 TOP
		TCCR2A |= (1<<WGM21)|(1<<WGM20);
 8dc:	e0 eb       	ldi	r30, 0xB0	; 176
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	83 60       	ori	r24, 0x03	; 3
 8e4:	80 83       	st	Z, r24
		TCCR2B |= (1<<WGM22);
 8e6:	e1 eb       	ldi	r30, 0xB1	; 177
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	80 81       	ld	r24, Z
 8ec:	88 60       	ori	r24, 0x08	; 8
 8ee:	80 83       	st	Z, r24
	}
	
	//Definimos el preescaler
	switch(preescaler){
 8f0:	40 34       	cpi	r20, 0x40	; 64
 8f2:	51 05       	cpc	r21, r1
 8f4:	e1 f0       	breq	.+56     	; 0x92e <__stack+0x2f>
 8f6:	3c f4       	brge	.+14     	; 0x906 <__stack+0x7>
 8f8:	41 15       	cp	r20, r1
 8fa:	51 05       	cpc	r21, r1
 8fc:	61 f0       	breq	.+24     	; 0x916 <__stack+0x17>
 8fe:	48 30       	cpi	r20, 0x08	; 8
 900:	51 05       	cpc	r21, r1
 902:	79 f0       	breq	.+30     	; 0x922 <__stack+0x23>
 904:	08 95       	ret
 906:	41 15       	cp	r20, r1
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	58 07       	cpc	r21, r24
 90c:	b1 f0       	breq	.+44     	; 0x93a <__stack+0x3b>
 90e:	41 15       	cp	r20, r1
 910:	54 40       	sbci	r21, 0x04	; 4
 912:	c9 f0       	breq	.+50     	; 0x946 <__stack+0x47>
 914:	08 95       	ret
		case 0:
		TCCR2B |= (1<<CS20);
 916:	e1 eb       	ldi	r30, 0xB1	; 177
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	81 60       	ori	r24, 0x01	; 1
 91e:	80 83       	st	Z, r24
		break;
 920:	08 95       	ret
		case 8:
		TCCR2B |= (1<<CS21);
 922:	e1 eb       	ldi	r30, 0xB1	; 177
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	82 60       	ori	r24, 0x02	; 2
 92a:	80 83       	st	Z, r24
		break;
 92c:	08 95       	ret
		case 64:
		TCCR2B |= (1<<CS21)|(1<<CS20);
 92e:	e1 eb       	ldi	r30, 0xB1	; 177
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	83 60       	ori	r24, 0x03	; 3
 936:	80 83       	st	Z, r24
		break;
 938:	08 95       	ret
		case 256:
		TCCR2B |= (1<<CS22);
 93a:	e1 eb       	ldi	r30, 0xB1	; 177
 93c:	f0 e0       	ldi	r31, 0x00	; 0
 93e:	80 81       	ld	r24, Z
 940:	84 60       	ori	r24, 0x04	; 4
 942:	80 83       	st	Z, r24
		break;
 944:	08 95       	ret
		case 1024:
		TCCR2B |= (1<<CS22) |(1<<CS21) | (1<<CS20);
 946:	e1 eb       	ldi	r30, 0xB1	; 177
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	87 60       	ori	r24, 0x07	; 7
 94e:	80 83       	st	Z, r24
 950:	08 95       	ret

Disassembly of section .text.init_PWM2B:

00000f60 <init_PWM2B>:
	//ICR1 = frecuency;
}

void init_PWM2B(int orientacion){
	//Definimos el puerto de salida
	DDRD |= (1<<PIND3);
 f60:	2a b1       	in	r18, 0x0a	; 10
 f62:	28 60       	ori	r18, 0x08	; 8
 f64:	2a b9       	out	0x0a, r18	; 10
	
	//Definimos la orientaci n
	if (orientacion==0){
 f66:	89 2b       	or	r24, r25
 f68:	31 f4       	brne	.+12     	; 0xf76 <init_PWM2B+0x16>
		//No invertido
		TCCR2A |= (1<<COM2B1);
 f6a:	e0 eb       	ldi	r30, 0xB0	; 176
 f6c:	f0 e0       	ldi	r31, 0x00	; 0
 f6e:	80 81       	ld	r24, Z
 f70:	80 62       	ori	r24, 0x20	; 32
 f72:	80 83       	st	Z, r24
 f74:	08 95       	ret
		}else{
		//invertido
		TCCR2A |= (1<<COM2B1) | (1<<COM2B0);
 f76:	e0 eb       	ldi	r30, 0xB0	; 176
 f78:	f0 e0       	ldi	r31, 0x00	; 0
 f7a:	80 81       	ld	r24, Z
 f7c:	80 63       	ori	r24, 0x30	; 48
 f7e:	80 83       	st	Z, r24
 f80:	08 95       	ret

Disassembly of section .text.duty_cycle2A:

00001064 <duty_cycle2A>:
	}
}

void duty_cycle2A(uint8_t duty){
	OCR2A = duty;
    1064:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1068:	08 95       	ret

Disassembly of section .text.duty_cycle2B:

0000106a <duty_cycle2B>:
}

void duty_cycle2B(uint16_t duty){
	OCR2B = duty;
    106a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    106e:	08 95       	ret

Disassembly of section .text.writeUART_car:

00000fe8 <writeUART_car>:
	uint8_t i;
	for (i=0; texto[i]!='\0'; i++){
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0=texto[i];
	}
}
 fe8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 fec:	95 ff       	sbrs	r25, 5
 fee:	fc cf       	rjmp	.-8      	; 0xfe8 <writeUART_car>
 ff0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 ff4:	08 95       	ret

Disassembly of section .text.receivedChar:

00000ff6 <receivedChar>:

uint8_t receivedChar(void){
	while (!(UCSR0A & (1 << RXC0)));
     ff6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ffa:	88 23       	and	r24, r24
     ffc:	e4 f7       	brge	.-8      	; 0xff6 <receivedChar>
	return UDR0;
     ffe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1002:	08 95       	ret

Disassembly of section .text:

0000104e <__divsf3>:
    104e:	0e 94 a9 04 	call	0x952	; 0x952 <__divsf3x>
    1052:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_round>

Disassembly of section .text:

00000952 <__divsf3x>:
 952:	10 c0       	rjmp	.+32     	; 0x974 <__divsf3x+0x22>
 954:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_pscB>
 958:	58 f0       	brcs	.+22     	; 0x970 <__divsf3x+0x1e>
 95a:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_pscA>
 95e:	40 f0       	brcs	.+16     	; 0x970 <__divsf3x+0x1e>
 960:	29 f4       	brne	.+10     	; 0x96c <__divsf3x+0x1a>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	29 f0       	breq	.+10     	; 0x970 <__divsf3x+0x1e>
 966:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>
 96a:	51 11       	cpse	r21, r1
 96c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
 970:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
 974:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_split3>
 978:	68 f3       	brcs	.-38     	; 0x954 <__divsf3x+0x2>

0000097a <__divsf3_pse>:
 97a:	99 23       	and	r25, r25
 97c:	b1 f3       	breq	.-20     	; 0x96a <__divsf3x+0x18>
 97e:	55 23       	and	r21, r21
 980:	91 f3       	breq	.-28     	; 0x966 <__divsf3x+0x14>
 982:	95 1b       	sub	r25, r21
 984:	55 0b       	sbc	r21, r21
 986:	bb 27       	eor	r27, r27
 988:	aa 27       	eor	r26, r26
 98a:	62 17       	cp	r22, r18
 98c:	73 07       	cpc	r23, r19
 98e:	84 07       	cpc	r24, r20
 990:	38 f0       	brcs	.+14     	; 0x9a0 <__divsf3_pse+0x26>
 992:	9f 5f       	subi	r25, 0xFF	; 255
 994:	5f 4f       	sbci	r21, 0xFF	; 255
 996:	22 0f       	add	r18, r18
 998:	33 1f       	adc	r19, r19
 99a:	44 1f       	adc	r20, r20
 99c:	aa 1f       	adc	r26, r26
 99e:	a9 f3       	breq	.-22     	; 0x98a <__divsf3_pse+0x10>
 9a0:	35 d0       	rcall	.+106    	; 0xa0c <__divsf3_pse+0x92>
 9a2:	0e 2e       	mov	r0, r30
 9a4:	3a f0       	brmi	.+14     	; 0x9b4 <__divsf3_pse+0x3a>
 9a6:	e0 e8       	ldi	r30, 0x80	; 128
 9a8:	32 d0       	rcall	.+100    	; 0xa0e <__divsf3_pse+0x94>
 9aa:	91 50       	subi	r25, 0x01	; 1
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	e6 95       	lsr	r30
 9b0:	00 1c       	adc	r0, r0
 9b2:	ca f7       	brpl	.-14     	; 0x9a6 <__divsf3_pse+0x2c>
 9b4:	2b d0       	rcall	.+86     	; 0xa0c <__divsf3_pse+0x92>
 9b6:	fe 2f       	mov	r31, r30
 9b8:	29 d0       	rcall	.+82     	; 0xa0c <__divsf3_pse+0x92>
 9ba:	66 0f       	add	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	bb 1f       	adc	r27, r27
 9c2:	26 17       	cp	r18, r22
 9c4:	37 07       	cpc	r19, r23
 9c6:	48 07       	cpc	r20, r24
 9c8:	ab 07       	cpc	r26, r27
 9ca:	b0 e8       	ldi	r27, 0x80	; 128
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <__divsf3_pse+0x56>
 9ce:	bb 0b       	sbc	r27, r27
 9d0:	80 2d       	mov	r24, r0
 9d2:	bf 01       	movw	r22, r30
 9d4:	ff 27       	eor	r31, r31
 9d6:	93 58       	subi	r25, 0x83	; 131
 9d8:	5f 4f       	sbci	r21, 0xFF	; 255
 9da:	3a f0       	brmi	.+14     	; 0x9ea <__divsf3_pse+0x70>
 9dc:	9e 3f       	cpi	r25, 0xFE	; 254
 9de:	51 05       	cpc	r21, r1
 9e0:	78 f0       	brcs	.+30     	; 0xa00 <__divsf3_pse+0x86>
 9e2:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>
 9e6:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	e4 f3       	brlt	.-8      	; 0x9e6 <__divsf3_pse+0x6c>
 9ee:	98 3e       	cpi	r25, 0xE8	; 232
 9f0:	d4 f3       	brlt	.-12     	; 0x9e6 <__divsf3_pse+0x6c>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	9f 5f       	subi	r25, 0xFF	; 255
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__divsf3_pse+0x78>
 a00:	88 0f       	add	r24, r24
 a02:	91 1d       	adc	r25, r1
 a04:	96 95       	lsr	r25
 a06:	87 95       	ror	r24
 a08:	97 f9       	bld	r25, 7
 a0a:	08 95       	ret
 a0c:	e1 e0       	ldi	r30, 0x01	; 1
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	bb 1f       	adc	r27, r27
 a16:	62 17       	cp	r22, r18
 a18:	73 07       	cpc	r23, r19
 a1a:	84 07       	cpc	r24, r20
 a1c:	ba 07       	cpc	r27, r26
 a1e:	20 f0       	brcs	.+8      	; 0xa28 <__divsf3_pse+0xae>
 a20:	62 1b       	sub	r22, r18
 a22:	73 0b       	sbc	r23, r19
 a24:	84 0b       	sbc	r24, r20
 a26:	ba 0b       	sbc	r27, r26
 a28:	ee 1f       	adc	r30, r30
 a2a:	88 f7       	brcc	.-30     	; 0xa0e <__divsf3_pse+0x94>
 a2c:	e0 95       	com	r30
 a2e:	08 95       	ret

Disassembly of section .text:

00000e3c <__fixunssfsi>:
 e3c:	0e 94 55 07 	call	0xeaa	; 0xeaa <__fp_splitA>
 e40:	88 f0       	brcs	.+34     	; 0xe64 <__fixunssfsi+0x28>
 e42:	9f 57       	subi	r25, 0x7F	; 127
 e44:	98 f0       	brcs	.+38     	; 0xe6c <__fixunssfsi+0x30>
 e46:	b9 2f       	mov	r27, r25
 e48:	99 27       	eor	r25, r25
 e4a:	b7 51       	subi	r27, 0x17	; 23
 e4c:	b0 f0       	brcs	.+44     	; 0xe7a <__fixunssfsi+0x3e>
 e4e:	e1 f0       	breq	.+56     	; 0xe88 <__fixunssfsi+0x4c>
 e50:	66 0f       	add	r22, r22
 e52:	77 1f       	adc	r23, r23
 e54:	88 1f       	adc	r24, r24
 e56:	99 1f       	adc	r25, r25
 e58:	1a f0       	brmi	.+6      	; 0xe60 <__fixunssfsi+0x24>
 e5a:	ba 95       	dec	r27
 e5c:	c9 f7       	brne	.-14     	; 0xe50 <__fixunssfsi+0x14>
 e5e:	14 c0       	rjmp	.+40     	; 0xe88 <__fixunssfsi+0x4c>
 e60:	b1 30       	cpi	r27, 0x01	; 1
 e62:	91 f0       	breq	.+36     	; 0xe88 <__fixunssfsi+0x4c>
 e64:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_zero>
 e68:	b1 e0       	ldi	r27, 0x01	; 1
 e6a:	08 95       	ret
 e6c:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_zero>
 e70:	67 2f       	mov	r22, r23
 e72:	78 2f       	mov	r23, r24
 e74:	88 27       	eor	r24, r24
 e76:	b8 5f       	subi	r27, 0xF8	; 248
 e78:	39 f0       	breq	.+14     	; 0xe88 <__fixunssfsi+0x4c>
 e7a:	b9 3f       	cpi	r27, 0xF9	; 249
 e7c:	cc f3       	brlt	.-14     	; 0xe70 <__fixunssfsi+0x34>
 e7e:	86 95       	lsr	r24
 e80:	77 95       	ror	r23
 e82:	67 95       	ror	r22
 e84:	b3 95       	inc	r27
 e86:	d9 f7       	brne	.-10     	; 0xe7e <__fixunssfsi+0x42>
 e88:	3e f4       	brtc	.+14     	; 0xe98 <__fixunssfsi+0x5c>
 e8a:	90 95       	com	r25
 e8c:	80 95       	com	r24
 e8e:	70 95       	com	r23
 e90:	61 95       	neg	r22
 e92:	7f 4f       	sbci	r23, 0xFF	; 255
 e94:	8f 4f       	sbci	r24, 0xFF	; 255
 e96:	9f 4f       	sbci	r25, 0xFF	; 255
 e98:	08 95       	ret

Disassembly of section .text:

00000d5c <__floatunsisf>:
 d5c:	e8 94       	clt
 d5e:	09 c0       	rjmp	.+18     	; 0xd72 <__floatsisf+0x12>

00000d60 <__floatsisf>:
 d60:	97 fb       	bst	r25, 7
 d62:	3e f4       	brtc	.+14     	; 0xd72 <__floatsisf+0x12>
 d64:	90 95       	com	r25
 d66:	80 95       	com	r24
 d68:	70 95       	com	r23
 d6a:	61 95       	neg	r22
 d6c:	7f 4f       	sbci	r23, 0xFF	; 255
 d6e:	8f 4f       	sbci	r24, 0xFF	; 255
 d70:	9f 4f       	sbci	r25, 0xFF	; 255
 d72:	99 23       	and	r25, r25
 d74:	a9 f0       	breq	.+42     	; 0xda0 <__floatsisf+0x40>
 d76:	f9 2f       	mov	r31, r25
 d78:	96 e9       	ldi	r25, 0x96	; 150
 d7a:	bb 27       	eor	r27, r27
 d7c:	93 95       	inc	r25
 d7e:	f6 95       	lsr	r31
 d80:	87 95       	ror	r24
 d82:	77 95       	ror	r23
 d84:	67 95       	ror	r22
 d86:	b7 95       	ror	r27
 d88:	f1 11       	cpse	r31, r1
 d8a:	f8 cf       	rjmp	.-16     	; 0xd7c <__floatsisf+0x1c>
 d8c:	fa f4       	brpl	.+62     	; 0xdcc <__floatsisf+0x6c>
 d8e:	bb 0f       	add	r27, r27
 d90:	11 f4       	brne	.+4      	; 0xd96 <__floatsisf+0x36>
 d92:	60 ff       	sbrs	r22, 0
 d94:	1b c0       	rjmp	.+54     	; 0xdcc <__floatsisf+0x6c>
 d96:	6f 5f       	subi	r22, 0xFF	; 255
 d98:	7f 4f       	sbci	r23, 0xFF	; 255
 d9a:	8f 4f       	sbci	r24, 0xFF	; 255
 d9c:	9f 4f       	sbci	r25, 0xFF	; 255
 d9e:	16 c0       	rjmp	.+44     	; 0xdcc <__floatsisf+0x6c>
 da0:	88 23       	and	r24, r24
 da2:	11 f0       	breq	.+4      	; 0xda8 <__floatsisf+0x48>
 da4:	96 e9       	ldi	r25, 0x96	; 150
 da6:	11 c0       	rjmp	.+34     	; 0xdca <__floatsisf+0x6a>
 da8:	77 23       	and	r23, r23
 daa:	21 f0       	breq	.+8      	; 0xdb4 <__floatsisf+0x54>
 dac:	9e e8       	ldi	r25, 0x8E	; 142
 dae:	87 2f       	mov	r24, r23
 db0:	76 2f       	mov	r23, r22
 db2:	05 c0       	rjmp	.+10     	; 0xdbe <__floatsisf+0x5e>
 db4:	66 23       	and	r22, r22
 db6:	71 f0       	breq	.+28     	; 0xdd4 <__floatsisf+0x74>
 db8:	96 e8       	ldi	r25, 0x86	; 134
 dba:	86 2f       	mov	r24, r22
 dbc:	70 e0       	ldi	r23, 0x00	; 0
 dbe:	60 e0       	ldi	r22, 0x00	; 0
 dc0:	2a f0       	brmi	.+10     	; 0xdcc <__floatsisf+0x6c>
 dc2:	9a 95       	dec	r25
 dc4:	66 0f       	add	r22, r22
 dc6:	77 1f       	adc	r23, r23
 dc8:	88 1f       	adc	r24, r24
 dca:	da f7       	brpl	.-10     	; 0xdc2 <__floatsisf+0x62>
 dcc:	88 0f       	add	r24, r24
 dce:	96 95       	lsr	r25
 dd0:	87 95       	ror	r24
 dd2:	97 f9       	bld	r25, 7
 dd4:	08 95       	ret

Disassembly of section .text:

0000102e <__fp_inf>:
    102e:	97 f9       	bld	r25, 7
    1030:	9f 67       	ori	r25, 0x7F	; 127
    1032:	80 e8       	ldi	r24, 0x80	; 128
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	08 95       	ret

Disassembly of section .text:

00001070 <__fp_nan>:
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	80 ec       	ldi	r24, 0xC0	; 192
    1074:	08 95       	ret

Disassembly of section .text:

00001004 <__fp_pscA>:
    1004:	00 24       	eor	r0, r0
    1006:	0a 94       	dec	r0
    1008:	16 16       	cp	r1, r22
    100a:	17 06       	cpc	r1, r23
    100c:	18 06       	cpc	r1, r24
    100e:	09 06       	cpc	r0, r25
    1010:	08 95       	ret

Disassembly of section .text:

00001012 <__fp_pscB>:
    1012:	00 24       	eor	r0, r0
    1014:	0a 94       	dec	r0
    1016:	12 16       	cp	r1, r18
    1018:	13 06       	cpc	r1, r19
    101a:	14 06       	cpc	r1, r20
    101c:	05 06       	cpc	r0, r21
    101e:	08 95       	ret

Disassembly of section .text:

00000f82 <__fp_round>:
 f82:	09 2e       	mov	r0, r25
 f84:	03 94       	inc	r0
 f86:	00 0c       	add	r0, r0
 f88:	11 f4       	brne	.+4      	; 0xf8e <__fp_round+0xc>
 f8a:	88 23       	and	r24, r24
 f8c:	52 f0       	brmi	.+20     	; 0xfa2 <__fp_round+0x20>
 f8e:	bb 0f       	add	r27, r27
 f90:	40 f4       	brcc	.+16     	; 0xfa2 <__fp_round+0x20>
 f92:	bf 2b       	or	r27, r31
 f94:	11 f4       	brne	.+4      	; 0xf9a <__fp_round+0x18>
 f96:	60 ff       	sbrs	r22, 0
 f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__fp_round+0x20>
 f9a:	6f 5f       	subi	r22, 0xFF	; 255
 f9c:	7f 4f       	sbci	r23, 0xFF	; 255
 f9e:	8f 4f       	sbci	r24, 0xFF	; 255
 fa0:	9f 4f       	sbci	r25, 0xFF	; 255
 fa2:	08 95       	ret

Disassembly of section .text:

00000e9a <__fp_split3>:
 e9a:	57 fd       	sbrc	r21, 7
 e9c:	90 58       	subi	r25, 0x80	; 128
 e9e:	44 0f       	add	r20, r20
 ea0:	55 1f       	adc	r21, r21
 ea2:	59 f0       	breq	.+22     	; 0xeba <__fp_splitA+0x10>
 ea4:	5f 3f       	cpi	r21, 0xFF	; 255
 ea6:	71 f0       	breq	.+28     	; 0xec4 <__fp_splitA+0x1a>
 ea8:	47 95       	ror	r20

00000eaa <__fp_splitA>:
 eaa:	88 0f       	add	r24, r24
 eac:	97 fb       	bst	r25, 7
 eae:	99 1f       	adc	r25, r25
 eb0:	61 f0       	breq	.+24     	; 0xeca <__fp_splitA+0x20>
 eb2:	9f 3f       	cpi	r25, 0xFF	; 255
 eb4:	79 f0       	breq	.+30     	; 0xed4 <__fp_splitA+0x2a>
 eb6:	87 95       	ror	r24
 eb8:	08 95       	ret
 eba:	12 16       	cp	r1, r18
 ebc:	13 06       	cpc	r1, r19
 ebe:	14 06       	cpc	r1, r20
 ec0:	55 1f       	adc	r21, r21
 ec2:	f2 cf       	rjmp	.-28     	; 0xea8 <__fp_split3+0xe>
 ec4:	46 95       	lsr	r20
 ec6:	f1 df       	rcall	.-30     	; 0xeaa <__fp_splitA>
 ec8:	08 c0       	rjmp	.+16     	; 0xeda <__fp_splitA+0x30>
 eca:	16 16       	cp	r1, r22
 ecc:	17 06       	cpc	r1, r23
 ece:	18 06       	cpc	r1, r24
 ed0:	99 1f       	adc	r25, r25
 ed2:	f1 cf       	rjmp	.-30     	; 0xeb6 <__fp_splitA+0xc>
 ed4:	86 95       	lsr	r24
 ed6:	71 05       	cpc	r23, r1
 ed8:	61 05       	cpc	r22, r1
 eda:	08 94       	sec
 edc:	08 95       	ret

Disassembly of section .text:

00001020 <__fp_zero>:
    1020:	e8 94       	clt

00001022 <__fp_szero>:
    1022:	bb 27       	eor	r27, r27
    1024:	66 27       	eor	r22, r22
    1026:	77 27       	eor	r23, r23
    1028:	cb 01       	movw	r24, r22
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret

Disassembly of section .text:

00001056 <__mulsf3>:
    1056:	0e 94 18 05 	call	0xa30	; 0xa30 <__mulsf3x>
    105a:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_round>

Disassembly of section .text:

00000a30 <__mulsf3x>:
 a30:	0f c0       	rjmp	.+30     	; 0xa50 <__mulsf3x+0x20>
 a32:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_pscA>
 a36:	38 f0       	brcs	.+14     	; 0xa46 <__mulsf3x+0x16>
 a38:	0e 94 09 08 	call	0x1012	; 0x1012 <__fp_pscB>
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__mulsf3x+0x16>
 a3e:	95 23       	and	r25, r21
 a40:	11 f0       	breq	.+4      	; 0xa46 <__mulsf3x+0x16>
 a42:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>
 a46:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__fp_nan>
 a4a:	11 24       	eor	r1, r1
 a4c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
 a50:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__fp_split3>
 a54:	70 f3       	brcs	.-36     	; 0xa32 <__mulsf3x+0x2>

00000a56 <__mulsf3_pse>:
 a56:	95 9f       	mul	r25, r21
 a58:	c1 f3       	breq	.-16     	; 0xa4a <__mulsf3x+0x1a>
 a5a:	95 0f       	add	r25, r21
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	55 1f       	adc	r21, r21
 a60:	62 9f       	mul	r22, r18
 a62:	f0 01       	movw	r30, r0
 a64:	72 9f       	mul	r23, r18
 a66:	bb 27       	eor	r27, r27
 a68:	f0 0d       	add	r31, r0
 a6a:	b1 1d       	adc	r27, r1
 a6c:	63 9f       	mul	r22, r19
 a6e:	aa 27       	eor	r26, r26
 a70:	f0 0d       	add	r31, r0
 a72:	b1 1d       	adc	r27, r1
 a74:	aa 1f       	adc	r26, r26
 a76:	64 9f       	mul	r22, r20
 a78:	66 27       	eor	r22, r22
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	66 1f       	adc	r22, r22
 a80:	82 9f       	mul	r24, r18
 a82:	22 27       	eor	r18, r18
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	62 1f       	adc	r22, r18
 a8a:	73 9f       	mul	r23, r19
 a8c:	b0 0d       	add	r27, r0
 a8e:	a1 1d       	adc	r26, r1
 a90:	62 1f       	adc	r22, r18
 a92:	83 9f       	mul	r24, r19
 a94:	a0 0d       	add	r26, r0
 a96:	61 1d       	adc	r22, r1
 a98:	22 1f       	adc	r18, r18
 a9a:	74 9f       	mul	r23, r20
 a9c:	33 27       	eor	r19, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	23 1f       	adc	r18, r19
 aa4:	84 9f       	mul	r24, r20
 aa6:	60 0d       	add	r22, r0
 aa8:	21 1d       	adc	r18, r1
 aaa:	82 2f       	mov	r24, r18
 aac:	76 2f       	mov	r23, r22
 aae:	6a 2f       	mov	r22, r26
 ab0:	11 24       	eor	r1, r1
 ab2:	9f 57       	subi	r25, 0x7F	; 127
 ab4:	50 40       	sbci	r21, 0x00	; 0
 ab6:	9a f0       	brmi	.+38     	; 0xade <__mulsf3_pse+0x88>
 ab8:	f1 f0       	breq	.+60     	; 0xaf6 <__mulsf3_pse+0xa0>
 aba:	88 23       	and	r24, r24
 abc:	4a f0       	brmi	.+18     	; 0xad0 <__mulsf3_pse+0x7a>
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	bb 1f       	adc	r27, r27
 ac4:	66 1f       	adc	r22, r22
 ac6:	77 1f       	adc	r23, r23
 ac8:	88 1f       	adc	r24, r24
 aca:	91 50       	subi	r25, 0x01	; 1
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	a9 f7       	brne	.-22     	; 0xaba <__mulsf3_pse+0x64>
 ad0:	9e 3f       	cpi	r25, 0xFE	; 254
 ad2:	51 05       	cpc	r21, r1
 ad4:	80 f0       	brcs	.+32     	; 0xaf6 <__mulsf3_pse+0xa0>
 ad6:	0c 94 17 08 	jmp	0x102e	; 0x102e <__fp_inf>
 ada:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
 ade:	5f 3f       	cpi	r21, 0xFF	; 255
 ae0:	e4 f3       	brlt	.-8      	; 0xada <__mulsf3_pse+0x84>
 ae2:	98 3e       	cpi	r25, 0xE8	; 232
 ae4:	d4 f3       	brlt	.-12     	; 0xada <__mulsf3_pse+0x84>
 ae6:	86 95       	lsr	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	b7 95       	ror	r27
 aee:	f7 95       	ror	r31
 af0:	e7 95       	ror	r30
 af2:	9f 5f       	subi	r25, 0xFF	; 255
 af4:	c1 f7       	brne	.-16     	; 0xae6 <__mulsf3_pse+0x90>
 af6:	fe 2b       	or	r31, r30
 af8:	88 0f       	add	r24, r24
 afa:	91 1d       	adc	r25, r1
 afc:	96 95       	lsr	r25
 afe:	87 95       	ror	r24
 b00:	97 f9       	bld	r25, 7
 b02:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000107e <_fini>:
    107e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001080 <__funcs_on_exit>:
    1080:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001082 <__simulator_exit>:
    1082:	08 95       	ret

Disassembly of section .text.exit:

00000fc0 <exit>:
 fc0:	ec 01       	movw	r28, r24
 fc2:	0e 94 40 08 	call	0x1080	; 0x1080 <__funcs_on_exit>
 fc6:	0e 94 3f 08 	call	0x107e	; 0x107e <_fini>
 fca:	ce 01       	movw	r24, r28
 fcc:	0e 94 41 08 	call	0x1082	; 0x1082 <__simulator_exit>
 fd0:	ce 01       	movw	r24, r28
 fd2:	0e 94 3d 08 	call	0x107a	; 0x107a <_Exit>

Disassembly of section .text._Exit:

0000107a <_Exit>:
    107a:	0e 94 65 00 	call	0xca	; 0xca <_exit>

Disassembly of section .text.avrlibc:

00000fd6 <eeprom_read_byte>:
 fd6:	cb 01       	movw	r24, r22
 fd8:	f9 99       	sbic	0x1f, 1	; 31
 fda:	fe cf       	rjmp	.-4      	; 0xfd8 <eeprom_read_byte+0x2>
 fdc:	92 bd       	out	0x22, r25	; 34
 fde:	81 bd       	out	0x21, r24	; 33
 fe0:	f8 9a       	sbi	0x1f, 0	; 31
 fe2:	99 27       	eor	r25, r25
 fe4:	80 b5       	in	r24, 0x20	; 32
 fe6:	08 95       	ret

Disassembly of section .text.avrlibc:

00000fa4 <eeprom_write_byte>:
 fa4:	26 2f       	mov	r18, r22

00000fa6 <eeprom_write_r18>:
 fa6:	f9 99       	sbic	0x1f, 1	; 31
 fa8:	fe cf       	rjmp	.-4      	; 0xfa6 <eeprom_write_r18>
 faa:	1f ba       	out	0x1f, r1	; 31
 fac:	92 bd       	out	0x22, r25	; 34
 fae:	81 bd       	out	0x21, r24	; 33
 fb0:	20 bd       	out	0x20, r18	; 32
 fb2:	0f b6       	in	r0, 0x3f	; 63
 fb4:	f8 94       	cli
 fb6:	fa 9a       	sbi	0x1f, 2	; 31
 fb8:	f9 9a       	sbi	0x1f, 1	; 31
 fba:	0f be       	out	0x3f, r0	; 63
 fbc:	01 96       	adiw	r24, 0x01	; 1
 fbe:	08 95       	ret
